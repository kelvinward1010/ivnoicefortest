// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AccountsGetAccountsData, AccountsGetAccountsResponse, AccountsCreateAccountData, AccountsCreateAccountResponse, AccountsGetAccountByIdData, AccountsGetAccountByIdResponse, AccountsUpdateAccountData, AccountsUpdateAccountResponse, AccountsDeleteAccountData, AccountsDeleteAccountResponse, AccountsMarkAccountAsImportantData, AccountsMarkAccountAsImportantResponse, DriversListDriveFilesResponse, DriversGetFolderContentsData, DriversGetFolderContentsResponse, DriversGetProjectFolderData, DriversGetProjectFolderResponse, DriversGetFolderFilteredData, DriversGetFolderFilteredResponse, DriversCreateFolderInParentData, DriversCreateFolderInParentResponse, DriversCreateAccountFolderData, DriversCreateAccountFolderResponse, DriversCreateProjectFolderData, DriversCreateProjectFolderResponse, DriversUploadFileToFolderData, DriversUploadFileToFolderResponse, DriversUpdateDriveFileData, DriversUpdateDriveFileResponse, DriversDeleteDriveFileData, DriversDeleteDriveFileResponse, EmployeesGetEmployeeData, EmployeesGetEmployeeResponse, EmployeesGetAllEmployeesData, EmployeesGetAllEmployeesResponse, ProjectsCreateProjectData, ProjectsCreateProjectResponse, ProjectsGetProjectsData, ProjectsGetProjectsResponse, ProjectsUpdateProjectData, ProjectsUpdateProjectResponse, ProjectsGetProjectByIdData, ProjectsGetProjectByIdResponse, ProjectsDeleteProjectByIdData, ProjectsDeleteProjectByIdResponse, ProjectsPinMarkData, ProjectsPinMarkResponse, ProjectSowsGetSowData, ProjectSowsGetSowResponse, ProjectSowsUpdateSowData, ProjectSowsUpdateSowResponse, ProjectSowsDeleteSowData, ProjectSowsDeleteSowResponse, ProjectSowsGetAllSowsData, ProjectSowsGetAllSowsResponse, ProjectSowsCreateSowData, ProjectSowsCreateSowResponse, ProjectSowsDeleteAllSowsData, ProjectSowsDeleteAllSowsResponse, SowsInvoiceIssueSchedulesGetInvoiceIssueScheduleData, SowsInvoiceIssueSchedulesGetInvoiceIssueScheduleResponse, SowsInvoiceIssueSchedulesUpdateInvoiceIssueScheduleData, SowsInvoiceIssueSchedulesUpdateInvoiceIssueScheduleResponse, SowsInvoiceIssueSchedulesDeleteInvoiceIssueScheduleData, SowsInvoiceIssueSchedulesDeleteInvoiceIssueScheduleResponse, SowsInvoiceIssueSchedulesGetAllInvoiceIssueSchedulesData, SowsInvoiceIssueSchedulesGetAllInvoiceIssueSchedulesResponse, SowsInvoiceIssueSchedulesCreateInvoiceIssueScheduleData, SowsInvoiceIssueSchedulesCreateInvoiceIssueScheduleResponse, SowsInvoiceIssueSchedulesDeleteAllPaymentScheduleData, SowsInvoiceIssueSchedulesDeleteAllPaymentScheduleResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse, UtilsTestData, UtilsTestResponse } from './types.gen';

export class AccountsService {
    /**
     * Get Accounts
     * @param data The data for the request.
     * @param data.pageSize
     * @param data.pageIndex
     * @param data.sortBy
     * @param data.sortOrder
     * @param data.search
     * @returns AccountsPublic Successful Response
     * @throws ApiError
     */
    public static getAccounts(data: AccountsGetAccountsData = {}): CancelablePromise<AccountsGetAccountsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/accounts',
            query: {
                page_size: data.pageSize,
                page_index: data.pageIndex,
                sort_by: data.sortBy,
                sort_order: data.sortOrder,
                search: data.search
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Account
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static createAccount(data: AccountsCreateAccountData): CancelablePromise<AccountsCreateAccountResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/accounts',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Account By Id
     * @param data The data for the request.
     * @param data.id
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static getAccountById(data: AccountsGetAccountByIdData): CancelablePromise<AccountsGetAccountByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/accounts/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Account
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static updateAccount(data: AccountsUpdateAccountData): CancelablePromise<AccountsUpdateAccountResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/accounts/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Account
     * @param data The data for the request.
     * @param data.id
     * @returns DeleteReponse Successful Response
     * @throws ApiError
     */
    public static deleteAccount(data: AccountsDeleteAccountData): CancelablePromise<AccountsDeleteAccountResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/accounts/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Mark Account As Important
     * @param data The data for the request.
     * @param data.accountId
     * @param data.pin
     * @returns AccountPublic Successful Response
     * @throws ApiError
     */
    public static markAccountAsImportant(data: AccountsMarkAccountAsImportantData): CancelablePromise<AccountsMarkAccountAsImportantResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/accounts/{account_id}/pin',
            path: {
                account_id: data.accountId
            },
            query: {
                pin: data.pin
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class DriversService {
    /**
     * List Drive Files
     * Get a list of files and folders in Google Drive by parent folder
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static listDriveFiles(): CancelablePromise<DriversListDriveFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/drive/files'
        });
    }
    
    /**
     * Get Folder Contents
     * Get a list of files and folders inside a folder
     * @param data The data for the request.
     * @param data.folderId
     * @returns DrivesAllSchema Successful Response
     * @throws ApiError
     */
    public static getFolderContents(data: DriversGetFolderContentsData): CancelablePromise<DriversGetFolderContentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/drive/folder/{folder_id}',
            path: {
                folder_id: data.folderId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Project Folder
     * Retrieve all data of a project folder with categorized subfolders and files based on project_id
     * @param data The data for the request.
     * @param data.projectId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getProjectFolder(data: DriversGetProjectFolderData): CancelablePromise<DriversGetProjectFolderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/drive/project-folder/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Folder Filtered
     * Retrieve specific types of folders and their contents in a project
     * @param data The data for the request.
     * @param data.projectId
     * @param data.accountId
     * @param data.folderTypes
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getFolderFiltered(data: DriversGetFolderFilteredData = {}): CancelablePromise<DriversGetFolderFilteredResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/drive/folder-filtered',
            query: {
                project_id: data.projectId,
                account_id: data.accountId,
                folder_types: data.folderTypes
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Folder In Parent
     * Create a folder inside another folder
     * @param data The data for the request.
     * @param data.parentId
     * @param data.name
     * @param data.folderTypes
     * @param data.accountId
     * @param data.projectId
     * @returns DriveCreateSchema Successful Response
     * @throws ApiError
     */
    public static createFolderInParent(data: DriversCreateFolderInParentData): CancelablePromise<DriversCreateFolderInParentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/drive/folder-in/{parent_id}',
            path: {
                parent_id: data.parentId
            },
            query: {
                name: data.name,
                folder_types: data.folderTypes,
                account_id: data.accountId,
                project_id: data.projectId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Account Folder
     * Create a root folder for an account on Google Drive
     * @param data The data for the request.
     * @param data.accountId
     * @param data.accountName
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createAccountFolder(data: DriversCreateAccountFolderData): CancelablePromise<DriversCreateAccountFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/drive/account-folder/{account_id}',
            path: {
                account_id: data.accountId
            },
            query: {
                account_name: data.accountName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Project Folder
     * Create a project folder containing four subfolders (NDA, MA, SOW, INVOICE).
     * @param data The data for the request.
     * @param data.name
     * @param data.projectId
     * @param data.accountId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createProjectFolder(data: DriversCreateProjectFolderData): CancelablePromise<DriversCreateProjectFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/drive/project-folder',
            query: {
                name: data.name,
                project_id: data.projectId,
                account_id: data.accountId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload File To Folder
     * Upload files to a folder on Google Drive
     * @param data The data for the request.
     * @param data.parentId
     * @param data.formData
     * @param data.folderTypes
     * @param data.projectId
     * @returns UploadFileSchema Successful Response
     * @throws ApiError
     */
    public static uploadFileToFolder(data: DriversUploadFileToFolderData): CancelablePromise<DriversUploadFileToFolderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/drive/upload/{parent_id}',
            path: {
                parent_id: data.parentId
            },
            query: {
                folder_types: data.folderTypes,
                project_id: data.projectId
            },
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Drive File
     * Update file or folder names on Google Drive
     * @param data The data for the request.
     * @param data.fileId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateDriveFile(data: DriversUpdateDriveFileData): CancelablePromise<DriversUpdateDriveFileResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/drive/{file_id}',
            path: {
                file_id: data.fileId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Drive File
     * Delete files or folders on Google Drive
     * @param data The data for the request.
     * @param data.fileId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static deleteDriveFile(data: DriversDeleteDriveFileData): CancelablePromise<DriversDeleteDriveFileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/drive/{file_id}',
            path: {
                file_id: data.fileId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class EmployeesService {
    /**
     * Get Employee
     * Get employee by id
     * @param data The data for the request.
     * @param data.id
     * @returns EmployeePublic Successful Response
     * @throws ApiError
     */
    public static getEmployee(data: EmployeesGetEmployeeData): CancelablePromise<EmployeesGetEmployeeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/employees/{id}',
            path: {
                id: data.id
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get All Employees
     * Get all employees
     * Query Params:
     * search: str for name or email
     * roleName: str for role name
     * @param data The data for the request.
     * @param data.search
     * @param data.roleName
     * @returns EmployeesPublic Successful Response
     * @throws ApiError
     */
    public static getAllEmployees(data: EmployeesGetAllEmployeesData = {}): CancelablePromise<EmployeesGetAllEmployeesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/employees',
            query: {
                search: data.search,
                roleName: data.roleName
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ProjectsService {
    /**
     * Create Project
     * Create Project
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static createProject(data: ProjectsCreateProjectData): CancelablePromise<ProjectsCreateProjectResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/projects',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Projects
     * Get all project
     * @param data The data for the request.
     * @param data.pageSize
     * @param data.pageIndex
     * @param data.sortBy
     * @param data.sortOrder
     * @param data.search
     * @param data.status
     * @param data.startDate
     * @param data.endDate
     * @returns ProjectsPublic Successful Response
     * @throws ApiError
     */
    public static getProjects(data: ProjectsGetProjectsData = {}): CancelablePromise<ProjectsGetProjectsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/projects',
            query: {
                page_size: data.pageSize,
                page_index: data.pageIndex,
                sort_by: data.sortBy,
                sort_order: data.sortOrder,
                search: data.search,
                status: data.status,
                start_date: data.startDate,
                end_date: data.endDate
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Project
     * Update Project
     * @param data The data for the request.
     * @param data.projectId
     * @param data.requestBody
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static updateProject(data: ProjectsUpdateProjectData): CancelablePromise<ProjectsUpdateProjectResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Project By Id
     * Get project by id
     * @param data The data for the request.
     * @param data.projectId
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static getProjectById(data: ProjectsGetProjectByIdData): CancelablePromise<ProjectsGetProjectByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Project By Id
     * @param data The data for the request.
     * @param data.projectId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteProjectById(data: ProjectsDeleteProjectByIdData): CancelablePromise<ProjectsDeleteProjectByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Pin Mark
     * @param data The data for the request.
     * @param data.projectId
     * @param data.isPinned
     * @returns ProjectPublic Successful Response
     * @throws ApiError
     */
    public static pinMark(data: ProjectsPinMarkData): CancelablePromise<ProjectsPinMarkResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/projects/{project_id}/isPinned',
            path: {
                project_id: data.projectId
            },
            query: {
                isPinned: data.isPinned
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class ProjectSowsService {
    /**
     * Get Sow
     * Retrieve a specific SOW in a project.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.sowId
     * @returns SOWPublic Successful Response
     * @throws ApiError
     */
    public static getSow(data: ProjectSowsGetSowData): CancelablePromise<ProjectSowsGetSowResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/projects/{project_id}/sows/{sow_id}',
            path: {
                project_id: data.projectId,
                sow_id: data.sowId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Sow
     * Update an existing SOW in a project.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.sowId
     * @param data.requestBody
     * @returns SOWPublic Successful Response
     * @throws ApiError
     */
    public static updateSow(data: ProjectSowsUpdateSowData): CancelablePromise<ProjectSowsUpdateSowResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/projects/{project_id}/sows/{sow_id}',
            path: {
                project_id: data.projectId,
                sow_id: data.sowId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Sow
     * Delete an existing SOW in a project.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.sowId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteSow(data: ProjectSowsDeleteSowData): CancelablePromise<ProjectSowsDeleteSowResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/projects/{project_id}/sows/{sow_id}',
            path: {
                project_id: data.projectId,
                sow_id: data.sowId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get All Sows
     * Retrieve all SOWs in a project.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.pageSize
     * @param data.pageIndex
     * @param data.sortBy
     * @param data.sortOrder
     * @param data.search
     * @returns SOWPublics Successful Response
     * @throws ApiError
     */
    public static getAllSows(data: ProjectSowsGetAllSowsData): CancelablePromise<ProjectSowsGetAllSowsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/projects/{project_id}/sows',
            path: {
                project_id: data.projectId
            },
            query: {
                page_size: data.pageSize,
                page_index: data.pageIndex,
                sort_by: data.sortBy,
                sort_order: data.sortOrder,
                search: data.search
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Sow
     * Create a new SOW in a project.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.requestBody
     * @returns SOWPublic Successful Response
     * @throws ApiError
     */
    public static createSow(data: ProjectSowsCreateSowData): CancelablePromise<ProjectSowsCreateSowResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/projects/{project_id}/sows',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete All Sows
     * Delete all SOWs in a project.
     * @param data The data for the request.
     * @param data.projectId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAllSows(data: ProjectSowsDeleteAllSowsData): CancelablePromise<ProjectSowsDeleteAllSowsResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/projects/{project_id}/sows',
            path: {
                project_id: data.projectId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SowsInvoiceIssueSchedulesService {
    /**
     * Get Invoice Issue Schedule
     * Retrieve a specific invoice issue schedule for a SOW.
     * @param data The data for the request.
     * @param data.sowId
     * @param data.iisId
     * @returns InvoiceIssueSchedulePublic Successful Response
     * @throws ApiError
     */
    public static getInvoiceIssueSchedule(data: SowsInvoiceIssueSchedulesGetInvoiceIssueScheduleData): CancelablePromise<SowsInvoiceIssueSchedulesGetInvoiceIssueScheduleResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sows/{sow_id}/invoice-issue-schedule/{iis_id}',
            path: {
                sow_id: data.sowId,
                iis_id: data.iisId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Invoice Issue Schedule
     * Update an invoice issue schedule for a SOW
     * @param data The data for the request.
     * @param data.sowId
     * @param data.iisId
     * @param data.requestBody
     * @returns InvoiceIssueSchedulePublic Successful Response
     * @throws ApiError
     */
    public static updateInvoiceIssueSchedule(data: SowsInvoiceIssueSchedulesUpdateInvoiceIssueScheduleData): CancelablePromise<SowsInvoiceIssueSchedulesUpdateInvoiceIssueScheduleResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/sows/{sow_id}/invoice-issue-schedule/{iis_id}',
            path: {
                sow_id: data.sowId,
                iis_id: data.iisId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Invoice Issue Schedule
     * Delete an invoice issue schedule for a SOW
     * @param data The data for the request.
     * @param data.sowId
     * @param data.iisId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteInvoiceIssueSchedule(data: SowsInvoiceIssueSchedulesDeleteInvoiceIssueScheduleData): CancelablePromise<SowsInvoiceIssueSchedulesDeleteInvoiceIssueScheduleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/sows/{sow_id}/invoice-issue-schedule/{iis_id}',
            path: {
                sow_id: data.sowId,
                iis_id: data.iisId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get All Invoice Issue Schedules
     * Retrieve all invoice issue schedules for a SOW
     * @param data The data for the request.
     * @param data.sowId
     * @param data.pageSize
     * @param data.pageIndex
     * @param data.sortBy
     * @param data.sortOrder
     * @param data.search
     * @returns InvoiceIssueSchedulesPublic Successful Response
     * @throws ApiError
     */
    public static getAllInvoiceIssueSchedules(data: SowsInvoiceIssueSchedulesGetAllInvoiceIssueSchedulesData): CancelablePromise<SowsInvoiceIssueSchedulesGetAllInvoiceIssueSchedulesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/sows/{sow_id}/invoice-issue-schedules',
            path: {
                sow_id: data.sowId
            },
            query: {
                page_size: data.pageSize,
                page_index: data.pageIndex,
                sort_by: data.sortBy,
                sort_order: data.sortOrder,
                search: data.search
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Invoice Issue Schedule
     * Create a new invoice issue schedule for a SOW
     * @param data The data for the request.
     * @param data.sowId
     * @param data.requestBody
     * @returns InvoiceIssueSchedulePublic Successful Response
     * @throws ApiError
     */
    public static createInvoiceIssueSchedule(data: SowsInvoiceIssueSchedulesCreateInvoiceIssueScheduleData): CancelablePromise<SowsInvoiceIssueSchedulesCreateInvoiceIssueScheduleResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/sows/{sow_id}/invoice-issue-schedule',
            path: {
                sow_id: data.sowId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete All Payment Schedule
     * Delete all invoice issue schedules
     * @param data The data for the request.
     * @param data.sowId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteAllPaymentSchedule(data: SowsInvoiceIssueSchedulesDeleteAllPaymentScheduleData): CancelablePromise<SowsInvoiceIssueSchedulesDeleteAllPaymentScheduleResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/sows/{sow_id}/invoice-issue-schedule',
            path: {
                sow_id: data.sowId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
    /**
     * Test
     * @param data The data for the request.
     * @param data.message
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static test(data: UtilsTestData): CancelablePromise<UtilsTestResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/kafka-test/',
            query: {
                message: data.message
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}